The graphical user interface (GUI) of the application was designed using JavaFX, a powerful Java-based UI platform. JavaFX 2.1 with its rich potpourri of graphical tools, media APIs, lightweight components, CSS skinning ability and concurrency support, proved to be an ideal candidate for the development of the chat client application. The GUI was designed with login and multiple concurrent user interaction capabilities. Primarily, three windows were created. On startup, the user is faced with the login window where his/her credentials (username and password) are entered. These details are relayed over the network to the server who verifies them and responds. If this process is successful, the user moves on to the next window, which is a user list where a list of online friends is displayed, based on the information returned by the server. A search bar was implemented (with the help of AutoFillTextBox) analogous to the 'search-as-you-type' feature of Google Instant, where the results of the peers online are narrowed down instantaneously as the user types based on the query, saving time. The user is also provided the option of adding a new peer to the current list of contacts. The user can converse with multiple peers by clicking on the peer’s name through the respective chat window. A thumbnail of each user’s profile picture is displayed alongside their respective messages for a more user friendly interface.

A typical chat application would use a designated "server" to which all the clients connect. However, as a distributed model is being used here, all that is needed is that the server be connected somewhere in the network. It is required to maintain a central record of users (using an SQLite Database) for the purposes of authentication, and broadcast of heartbeat signals for synchronization purposes. All communication with the server uses the RSA Protocol for encryption and authentication. When a client comes online, it tries to connect with peers in the local subnet via UDP broadcasts. Once it does connect to an existing network, it will acquire the addresses of additional peers with which it will try and establish links with, to increase the connectivity of the network. A variation of the Needham Schroeder protocol is used for mutual authentication and establishment of a secure session key between to users who wish to communicate. The path that messages take to go from one client to another is dynamically determined based on the network topology and transparently recalculated in case any intermediate node goes down.

Front End Creator - Dhruva Kumar
Back End Creator - Kaustubh Karkare
